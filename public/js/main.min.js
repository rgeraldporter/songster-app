(function () {
'use strict';

function noop() {}

function assign(target) {
	var k,
		source,
		i = 1,
		len = arguments.length;
	for (; i < len; i++) {
		source = arguments[i];
		for (k in source) target[k] = source[k];
	}

	return target;
}

function appendNode(node, target) {
	target.appendChild(node);
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function destroyEach(iterations) {
	for (var i = 0; i < iterations.length; i += 1) {
		if (iterations[i]) iterations[i].d();
	}
}

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function addListener(node, event, handler) {
	node.addEventListener(event, handler, false);
}

function removeListener(node, event, handler) {
	node.removeEventListener(event, handler, false);
}

function setAttribute(node, attribute, value) {
	node.setAttribute(attribute, value);
}

function toNumber(value) {
	return value === '' ? undefined : +value;
}

function selectOption(select, value) {
	for (var i = 0; i < select.options.length; i += 1) {
		var option = select.options[i];

		if (option.__value === value) {
			option.selected = true;
			return;
		}
	}
}

function selectValue(select) {
	var selectedOption = select.querySelector(':checked') || select.options[0];
	return selectedOption && selectedOption.__value;
}

function blankObject() {
	return Object.create(null);
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function differs(a, b) {
	return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function init(component, options) {
	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._bind = options._bind;

	component.options = options;
	component.root = options.root || component;
	component.store = component.root.store || options.store;
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	this.root._lock = true;
	callAll(this.root._beforecreate);
	callAll(this.root._oncreate);
	callAll(this.root._aftercreate);
	this.root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign({}, oldState, newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}

function _mount(target, anchor) {
	this._fragment.m(target, anchor);
}

function _unmount() {
	if (this._fragment) this._fragment.u();
}

var proto = {
	destroy: destroy,
	get: get,
	fire: fire,
	observe: observe,
	on: on,
	set: set,
	teardown: destroy,
	_recompute: noop,
	_set: _set,
	_mount: _mount,
	_unmount: _unmount
};

/* src/components/main.html generated by Svelte v1.54.0 */
function encapsulateStyles(node) {
	setAttribute(node, "svelte-792515258", "");
}

function add_css() {
	var style = createElement("style");
	style.id = 'svelte-792515258-style';
	style.textContent = "[svelte-792515258].button-secondary,[svelte-792515258] .button-secondary{color:white;border-radius:4px;text-shadow:0 1px 1px rgba(0, 0, 0, 0.2);background:rgb(66, 184, 221)}";
	appendNode(style, document.head);
}

function create_main_fragment(state, component) {
	var div, h1, text, text_2, form, fieldset, div_1, button, text_4, button_1, button_1_hidden_value, text_8, fieldset_1, legend, text_10, div_2, label, text_12, input, text_13, input_1, input_1_updating = false, text_14, span, text_17, div_3, label_1, text_19, select, select_updating = false, text_20, span_1, text_23, div_4, label_2, text_25, select_1, option, text_26, option_1, text_27, select_1_updating = false, text_30, fieldset_2, legend_1, text_32, div_5, label_3, text_34, input_2, input_2_updating = false, text_35, span_2, text_38, div_6, label_4, text_40, input_3, input_3_updating = false, text_42, div_7, label_5, text_44, select_2, option_2, text_45, option_3, text_46, option_4, text_47, option_5, text_48, select_2_updating = false;

	function click_handler(event) {
		component.set({ pause: true });
	}

	function click_handler_1(event) {
		component.set({ pause: false });
	}

	function input_input_handler() {
		component.set({ interval: toNumber(input.value) });
	}

	function input_change_handler() {
		component.set({ interval: toNumber(input.value) });
	}

	function input_1_input_handler() {
		input_1_updating = true;
		component.set({ interval: toNumber(input_1.value) });
		input_1_updating = false;
	}

	var folderNameOptions = state.folderNameOptions;

	var each_blocks = [];

	for (var i = 0; i < folderNameOptions.length; i += 1) {
		each_blocks[i] = create_each_block(state, folderNameOptions, folderNameOptions[i], i, component);
	}

	function select_change_handler() {
		select_updating = true;
		component.set({ directory: selectValue(select) });
		select_updating = false;
	}

	function select_1_change_handler() {
		select_1_updating = true;
		component.set({ sort: selectValue(select_1) });
		select_1_updating = false;
	}

	function input_2_input_handler() {
		input_2_updating = true;
		component.set({ latitude: input_2.value });
		input_2_updating = false;
	}

	function input_3_input_handler() {
		input_3_updating = true;
		component.set({ longitude: input_3.value });
		input_3_updating = false;
	}

	function select_2_change_handler() {
		select_2_updating = true;
		component.set({ cycle: selectValue(select_2) });
		select_2_updating = false;
	}

	return {
		c: function create() {
			div = createElement("div");
			h1 = createElement("h1");
			text = createText(state.title);
			text_2 = createText("\n\n\n");
			form = createElement("form");
			fieldset = createElement("fieldset");
			div_1 = createElement("div");
			button = createElement("button");
			button.textContent = "⏸️ Pause";
			text_4 = createText("\n        ");
			button_1 = createElement("button");
			button_1.textContent = "▶️ Play";
			text_8 = createText("\n    \n    ");
			fieldset_1 = createElement("fieldset");
			legend = createElement("legend");
			legend.textContent = "Song settings";
			text_10 = createText("\n\n        \n\n        ");
			div_2 = createElement("div");
			label = createElement("label");
			label.textContent = "Song interval";
			text_12 = createText("\n            ");
			input = createElement("input");
			text_13 = createText("\n            ");
			input_1 = createElement("input");
			text_14 = createText("\n            ");
			span = createElement("span");
			span.textContent = "Minutes between each song";
			text_17 = createText("\n\n        ");
			div_3 = createElement("div");
			label_1 = createElement("label");
			label_1.textContent = "Folder name";
			text_19 = createText("\n            ");
			select = createElement("select");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			text_20 = createText("\n            ");
			span_1 = createElement("span");
			span_1.textContent = "Folder to play MP3s from";
			text_23 = createText("\n\n        ");
			div_4 = createElement("div");
			label_2 = createElement("label");
			label_2.textContent = "Sort";
			text_25 = createText("\n            ");
			select_1 = createElement("select");
			option = createElement("option");
			text_26 = createText("alphabetic (not available yet)");
			option_1 = createElement("option");
			text_27 = createText("random");
			text_30 = createText("\n\n    ");
			fieldset_2 = createElement("fieldset");
			legend_1 = createElement("legend");
			legend_1.textContent = "Environmental settings";
			text_32 = createText("\n        ");
			div_5 = createElement("div");
			label_3 = createElement("label");
			label_3.textContent = "Latitude";
			text_34 = createText("\n            ");
			input_2 = createElement("input");
			text_35 = createText("\n            ");
			span_2 = createElement("span");
			span_2.textContent = "Used to determine daylight cycle times";
			text_38 = createText("\n\n        ");
			div_6 = createElement("div");
			label_4 = createElement("label");
			label_4.textContent = "Longitude";
			text_40 = createText("\n            ");
			input_3 = createElement("input");
			text_42 = createText("\n\n        ");
			div_7 = createElement("div");
			label_5 = createElement("label");
			label_5.textContent = "Activity Cycle";
			text_44 = createText("\n            ");
			select_2 = createElement("select");
			option_2 = createElement("option");
			text_45 = createText("Run only in daylight (diurnal)");
			option_3 = createElement("option");
			text_46 = createText("Run only at night time (nocturnal)");
			option_4 = createElement("option");
			text_47 = createText("Run only at twilight (crepuscular)");
			option_5 = createElement("option");
			text_48 = createText("Run at all times (cathemeral)");
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			div.className = "header";
			encapsulateStyles(form);
			button.type = "button";
			button.hidden = state.pause;
			button.className = "button-secondary pure-button";
			addListener(button, "click", click_handler);
			button_1.type = "button";
			button_1.hidden = button_1_hidden_value = !state.pause;
			button_1.className = "button-secondary pure-button";
			addListener(button_1, "click", click_handler_1);
			div_1.className = "pure-controls";
			label.htmlFor = "interval";
			addListener(input, "input", input_input_handler);
			addListener(input, "change", input_change_handler);
			input.type = "range";
			setAttribute(input, "defaultvalue", "0.2");
			input.min = "0.2";
			input.max = "100";
			input.id = "interval";
			addListener(input_1, "input", input_1_input_handler);
			input_1.id = "interval";
			input_1.type = "number";
			setAttribute(input_1, "defaultvalue", "0.2");
			input_1.min = "0.2";
			input_1.max = "100.2";
			span.className = "pure-form-message-inline";
			div_2.className = "pure-control-group";
			label_1.htmlFor = "directory";
			addListener(select, "change", select_change_handler);
			if (!('directory' in state)) component.root._beforecreate.push(select_change_handler);
			select.id = "directory";
			span_1.className = "pure-form-message-inline";
			div_3.className = "pure-control-group";
			label_2.htmlFor = "sort";
			option.__value = "alphabetic";
			option.value = option.__value;
			option_1.__value = "random";
			option_1.value = option_1.__value;
			addListener(select_1, "change", select_1_change_handler);
			if (!('sort' in state)) component.root._beforecreate.push(select_1_change_handler);
			select_1.id = "sort";
			div_4.className = "pure-control-group";
			label_3.htmlFor = "interval";
			addListener(input_2, "input", input_2_input_handler);
			input_2.id = "interval";
			input_2.type = "text";
			span_2.className = "pure-form-message-inline";
			div_5.className = "pure-control-group";
			label_4.htmlFor = "interval";
			addListener(input_3, "input", input_3_input_handler);
			input_3.id = "interval";
			input_3.type = "text";
			div_6.className = "pure-control-group";
			label_5.htmlFor = "cycle";
			option_2.__value = "diurnal";
			option_2.value = option_2.__value;
			option_3.__value = "nocturnal";
			option_3.value = option_3.__value;
			option_4.__value = "crepuscular";
			option_4.value = option_4.__value;
			option_5.__value = "cathemeral";
			option_5.value = option_5.__value;
			addListener(select_2, "change", select_2_change_handler);
			if (!('cycle' in state)) component.root._beforecreate.push(select_2_change_handler);
			select_2.id = "cycle";
			div_7.className = "pure-control-group";
			form.className = "pure-form pure-form-aligned";
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
			appendNode(h1, div);
			appendNode(text, h1);
			insertNode(text_2, target, anchor);
			insertNode(form, target, anchor);
			appendNode(fieldset, form);
			appendNode(div_1, fieldset);
			appendNode(button, div_1);
			appendNode(text_4, div_1);
			appendNode(button_1, div_1);
			appendNode(text_8, form);
			appendNode(fieldset_1, form);
			appendNode(legend, fieldset_1);
			appendNode(text_10, fieldset_1);
			appendNode(div_2, fieldset_1);
			appendNode(label, div_2);
			appendNode(text_12, div_2);
			appendNode(input, div_2);

			input.value = state.interval;

			appendNode(text_13, div_2);
			appendNode(input_1, div_2);

			input_1.value = state.interval;

			appendNode(text_14, div_2);
			appendNode(span, div_2);
			appendNode(text_17, fieldset_1);
			appendNode(div_3, fieldset_1);
			appendNode(label_1, div_3);
			appendNode(text_19, div_3);
			appendNode(select, div_3);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			selectOption(select, state.directory);

			appendNode(text_20, div_3);
			appendNode(span_1, div_3);
			appendNode(text_23, fieldset_1);
			appendNode(div_4, fieldset_1);
			appendNode(label_2, div_4);
			appendNode(text_25, div_4);
			appendNode(select_1, div_4);
			appendNode(option, select_1);
			appendNode(text_26, option);
			appendNode(option_1, select_1);
			appendNode(text_27, option_1);

			selectOption(select_1, state.sort);

			appendNode(text_30, form);
			appendNode(fieldset_2, form);
			appendNode(legend_1, fieldset_2);
			appendNode(text_32, fieldset_2);
			appendNode(div_5, fieldset_2);
			appendNode(label_3, div_5);
			appendNode(text_34, div_5);
			appendNode(input_2, div_5);

			input_2.value = state.latitude;

			appendNode(text_35, div_5);
			appendNode(span_2, div_5);
			appendNode(text_38, fieldset_2);
			appendNode(div_6, fieldset_2);
			appendNode(label_4, div_6);
			appendNode(text_40, div_6);
			appendNode(input_3, div_6);

			input_3.value = state.longitude;

			appendNode(text_42, fieldset_2);
			appendNode(div_7, fieldset_2);
			appendNode(label_5, div_7);
			appendNode(text_44, div_7);
			appendNode(select_2, div_7);
			appendNode(option_2, select_2);
			appendNode(text_45, option_2);
			appendNode(option_3, select_2);
			appendNode(text_46, option_3);
			appendNode(option_4, select_2);
			appendNode(text_47, option_4);
			appendNode(option_5, select_2);
			appendNode(text_48, option_5);

			selectOption(select_2, state.cycle);
		},

		p: function update(changed, state) {
			if (changed.title) {
				text.data = state.title;
			}

			if (changed.pause) {
				button.hidden = state.pause;
			}

			if ((changed.pause) && button_1_hidden_value !== (button_1_hidden_value = !state.pause)) {
				button_1.hidden = button_1_hidden_value;
			}

			input.value = state.interval;
			input.value = state.interval;
			if (!input_1_updating) input_1.value = state.interval;

			var folderNameOptions = state.folderNameOptions;

			if (changed.folderNameOptions) {
				for (var i = 0; i < folderNameOptions.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].p(changed, state, folderNameOptions, folderNameOptions[i], i);
					} else {
						each_blocks[i] = create_each_block(state, folderNameOptions, folderNameOptions[i], i, component);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = folderNameOptions.length;
			}

			if (!select_updating) selectOption(select, state.directory);
			if (!select_1_updating) selectOption(select_1, state.sort);
			if (!input_2_updating) input_2.value = state.latitude;
			if (!input_3_updating) input_3.value = state.longitude;
			if (!select_2_updating) selectOption(select_2, state.cycle);
		},

		u: function unmount() {
			detachNode(div);
			detachNode(text_2);
			detachNode(form);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}
		},

		d: function destroy$$1() {
			removeListener(button, "click", click_handler);
			removeListener(button_1, "click", click_handler_1);
			removeListener(input, "input", input_input_handler);
			removeListener(input, "change", input_change_handler);
			removeListener(input_1, "input", input_1_input_handler);

			destroyEach(each_blocks);

			removeListener(select, "change", select_change_handler);
			removeListener(select_1, "change", select_1_change_handler);
			removeListener(input_2, "input", input_2_input_handler);
			removeListener(input_3, "input", input_3_input_handler);
			removeListener(select_2, "change", select_2_change_handler);
		}
	};
}

// (40:16) {{#each folderNameOptions as folderName}}
function create_each_block(state, folderNameOptions, folderName, folderName_index, component) {
	var option, text_value = folderName, text, option_value_value;

	return {
		c: function create() {
			option = createElement("option");
			text = createText(text_value);
			this.h();
		},

		h: function hydrate() {
			option.__value = option_value_value = folderName;
			option.value = option.__value;
		},

		m: function mount(target, anchor) {
			insertNode(option, target, anchor);
			appendNode(text, option);
		},

		p: function update(changed, state, folderNameOptions, folderName, folderName_index) {
			if ((changed.folderNameOptions) && text_value !== (text_value = folderName)) {
				text.data = text_value;
			}

			if ((changed.folderNameOptions) && option_value_value !== (option_value_value = folderName)) {
				option.__value = option_value_value;
			}

			option.value = option.__value;
		},

		u: function unmount() {
			detachNode(option);
		},

		d: noop
	};
}

function Main(options) {
	init(this, options);
	this._state = assign({}, options.data);

	if (!document.getElementById("svelte-792515258-style")) add_css();

	if (!options.root) {
		this._oncreate = [];
		this._beforecreate = [];
	}

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);

		callAll(this._beforecreate);
	}
}

assign(Main.prototype, proto);

const get$1 = () => new Promise((resolve, reject) => {
    const req = new XMLHttpRequest();
    req.open('GET', 'http://raspberrypi.local:8813/config', true);
    req.onload = function () {
        this.status >= 200 && this.status < 300
            ? resolve(req.response)
            : reject(req);
    };
    req.onerror = () => reject(req);
    req.send();
});

const put = config => new Promise((resolve, reject) => {
    const req = new XMLHttpRequest();
    req.open('PUT', 'http://raspberrypi.local:8813/config');
    req.setRequestHeader('Content-Type', 'application/json');
    req.onload = function () {
        this.status >= 200 && this.status < 300
            ? resolve(req.response)
            : reject(req);
    };
    req.onerror = () => reject(req);
    req.send(JSON.stringify(config));
});

var http = {
    get: get$1,
    put
}

const component = new Main({
  target: document.querySelector("main"),
  data: {
    title: "Songster config",
    interval: 0.2,
    directory: "EAME",
    sort: "random",
    latitude: 44.123,
    longitude: -120.555,
    cycle: "diurnal",
    pause: false,
    volume: 4,
    folderNameOptions: ['EAME', 'BOBO']
  }
});

http
  .get()
  .then(data => component.set(JSON.parse(data)))
  .then(() => wait(2000))
  .then(() => component.observe('interval', interval => http.put({interval})))
  .then(() => component.observe('cycle', cycle => http.put({cycle})))
  .then(() => component.observe('pause', pause => http.put({pause})))
  .then(() => component.observe('sort', sort => http.put({sort})))
  .then(() => component.observe('latitude', latitude => http.put({latitude})))
  .then(() => component.observe('longitude', longitude => http.put({longitude})))
  .then(() => component.observe('directory', directory => http.put({directory})))
  .catch(console.error);

function wait(time) {
    return new Promise(resolve => setTimeout(resolve, time));
}

}());
