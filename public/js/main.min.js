(function () {
'use strict';

function appendNode ( node, target ) {
	target.appendChild( node );
}

function insertNode ( node, target, anchor ) {
	target.insertBefore( node, anchor );
}

function detachNode ( node ) {
	node.parentNode.removeChild( node );
}

function createElement ( name ) {
	return document.createElement( name );
}

function createText ( data ) {
	return document.createTextNode( data );
}

function addEventListener ( node, event, handler ) {
	node.addEventListener ( event, handler, false );
}

function removeEventListener ( node, event, handler ) {
	node.removeEventListener ( event, handler, false );
}

function setAttribute ( node, attribute, value ) {
	node.setAttribute ( attribute, value );
}

function get ( key ) {
	return key ? this._state[ key ] : this._state;
}

function fire ( eventName, data ) {
	var handlers = eventName in this._handlers && this._handlers[ eventName ].slice();
	if ( !handlers ) return;

	for ( var i = 0; i < handlers.length; i += 1 ) {
		handlers[i].call( this, data );
	}
}

function observe ( key, callback, options ) {
	var group = ( options && options.defer ) ? this._observers.pre : this._observers.post;

	( group[ key ] || ( group[ key ] = [] ) ).push( callback );

	if ( !options || options.init !== false ) {
		callback.__calling = true;
		callback.call( this, this._state[ key ] );
		callback.__calling = false;
	}

	return {
		cancel: function () {
			var index = group[ key ].indexOf( callback );
			if ( ~index ) group[ key ].splice( index, 1 );
		}
	};
}

function on ( eventName, handler ) {
	var handlers = this._handlers[ eventName ] || ( this._handlers[ eventName ] = [] );
	handlers.push( handler );

	return {
		cancel: function () {
			var index = handlers.indexOf( handler );
			if ( ~index ) handlers.splice( index, 1 );
		}
	};
}

function set ( newState ) {
	this._set( newState );
	( this._root || this )._flush();
}

function _flush () {
	if ( !this._renderHooks ) return;

	while ( this._renderHooks.length ) {
		var hook = this._renderHooks.pop();
		hook.fn.call( hook.context );
	}
}

function dispatchObservers ( component, group, newState, oldState ) {
	for ( var key in group ) {
		if ( !( key in newState ) ) continue;

		var newValue = newState[ key ];
		var oldValue = oldState[ key ];

		if ( newValue === oldValue && typeof newValue !== 'object' ) continue;

		var callbacks = group[ key ];
		if ( !callbacks ) continue;

		for ( var i = 0; i < callbacks.length; i += 1 ) {
			var callback = callbacks[i];
			if ( callback.__calling ) continue;

			callback.__calling = true;
			callback.call( component, newValue, oldValue );
			callback.__calling = false;
		}
	}
}

let addedCss = false;
function addCss () {
	var style = createElement( 'style' );
	style.textContent = "\n    [svelte-4150268863].button-secondary, [svelte-4150268863] .button-secondary {\n        color: white;\n        border-radius: 4px;\n        text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);\n        background: rgb(66, 184, 221);\n    }\n";
	appendNode( style, document.head );

	addedCss = true;
}

function renderMainFragment ( root, component ) {
	var div = createElement( 'div' );
	setAttribute( div, 'svelte-4150268863', '' );
	div.className = "header";
	
	var h1 = createElement( 'h1' );
	setAttribute( h1, 'svelte-4150268863', '' );
	
	appendNode( h1, div );
	var last_text = root.title;
	var text = createText( last_text );
	appendNode( text, h1 );
	var text1 = createText( "\n" );
	var text2 = createText( "\n\n" );
	
	var form = createElement( 'form' );
	setAttribute( form, 'svelte-4150268863', '' );
	form.className = "pure-form pure-form-aligned";
	
	var fieldset = createElement( 'fieldset' );
	setAttribute( fieldset, 'svelte-4150268863', '' );
	
	appendNode( fieldset, form );
	
	var div1 = createElement( 'div' );
	setAttribute( div1, 'svelte-4150268863', '' );
	div1.className = "pure-controls";
	
	appendNode( div1, fieldset );
	
	var button = createElement( 'button' );
	setAttribute( button, 'svelte-4150268863', '' );
	button.className = "button-secondary pure-button";
	
	appendNode( button, div1 );
	appendNode( createText( "⏸️ Pause" ), button );
	appendNode( createText( "\n    \n    " ), form );
	
	var fieldset1 = createElement( 'fieldset' );
	setAttribute( fieldset1, 'svelte-4150268863', '' );
	
	appendNode( fieldset1, form );
	
	var legend = createElement( 'legend' );
	setAttribute( legend, 'svelte-4150268863', '' );
	
	appendNode( legend, fieldset1 );
	appendNode( createText( "Song settings" ), legend );
	appendNode( createText( "\n        " ), fieldset1 );
	
	var div2 = createElement( 'div' );
	setAttribute( div2, 'svelte-4150268863', '' );
	div2.className = "pure-control-group";
	
	appendNode( div2, fieldset1 );
	
	var label = createElement( 'label' );
	setAttribute( label, 'svelte-4150268863', '' );
	label.htmlFor = "interval";
	
	appendNode( label, div2 );
	appendNode( createText( "Song interval" ), label );
	appendNode( createText( "\n            " ), div2 );
	
	var input = createElement( 'input' );
	setAttribute( input, 'svelte-4150268863', '' );
	input.id = "interval";
	input.type = "number";
	setAttribute( input, 'defaultValue', "5" );
	input.min = "0";
	input.max = "100";
	
	var input_updating = false;
	
	function inputChangeHandler () {
		input_updating = true;
		component._set({ interval: input.value });
		input_updating = false;
	}
	
	addEventListener( input, 'input', inputChangeHandler );
	
	appendNode( input, div2 );
	
	input.value = root.interval;
	
	appendNode( createText( "\n            " ), div2 );
	
	var span = createElement( 'span' );
	setAttribute( span, 'svelte-4150268863', '' );
	span.className = "pure-form-message-inline";
	
	appendNode( span, div2 );
	appendNode( createText( "Minutes between each song" ), span );
	appendNode( createText( "\n\n        " ), fieldset1 );
	
	var div3 = createElement( 'div' );
	setAttribute( div3, 'svelte-4150268863', '' );
	div3.className = "pure-control-group";
	
	appendNode( div3, fieldset1 );
	
	var label1 = createElement( 'label' );
	setAttribute( label1, 'svelte-4150268863', '' );
	label1.htmlFor = "interval";
	
	appendNode( label1, div3 );
	appendNode( createText( "Folder name" ), label1 );
	appendNode( createText( "\n            " ), div3 );
	
	var input1 = createElement( 'input' );
	setAttribute( input1, 'svelte-4150268863', '' );
	input1.id = "interval";
	input1.type = "text";
	setAttribute( input1, 'defaultValue', "5" );
	input1.min = "0";
	input1.max = "100";
	
	var input1_updating = false;
	
	function input1ChangeHandler () {
		input1_updating = true;
		component._set({ folder: input1.value });
		input1_updating = false;
	}
	
	addEventListener( input1, 'input', input1ChangeHandler );
	
	appendNode( input1, div3 );
	
	input1.value = root.folder;
	
	appendNode( createText( "\n            " ), div3 );
	
	var span1 = createElement( 'span' );
	setAttribute( span1, 'svelte-4150268863', '' );
	span1.className = "pure-form-message-inline";
	
	appendNode( span1, div3 );
	appendNode( createText( "Folder to play MP3s from" ), span1 );
	appendNode( createText( "\n\n        " ), fieldset1 );
	
	var div4 = createElement( 'div' );
	setAttribute( div4, 'svelte-4150268863', '' );
	div4.className = "pure-control-group";
	
	appendNode( div4, fieldset1 );
	
	var label2 = createElement( 'label' );
	setAttribute( label2, 'svelte-4150268863', '' );
	label2.htmlFor = "sort";
	
	appendNode( label2, div4 );
	appendNode( createText( "Sort" ), label2 );
	appendNode( createText( "\n            " ), div4 );
	
	var select = createElement( 'select' );
	setAttribute( select, 'svelte-4150268863', '' );
	select.id = "sort";
	
	var select_updating = false;
	
	function selectChangeHandler () {
		select_updating = true;
		var selectedOption = select.selectedOptions[0] || select.options[0];
		component._set({ sort: selectedOption && selectedOption.__value });
		select_updating = false;
	}
	
	addEventListener( select, 'change', selectChangeHandler );
	
	appendNode( select, div4 );
	
	var option1 = createElement( 'option' );
	setAttribute( option1, 'svelte-4150268863', '' );
	
	appendNode( option1, select );
	appendNode( createText( "alphabetic" ), option1 );
	appendNode( createText( "\n                " ), select );
	
	var option2 = createElement( 'option' );
	setAttribute( option2, 'svelte-4150268863', '' );
	
	appendNode( option2, select );
	appendNode( createText( "random" ), option2 );
	
	var value = root.sort;
	for ( var i = 0; i < select.options.length; i += 1 ) {
		var option = select.options[i];
		if ( option.__value === value ) {
			option.selected = true;
			break;
		}
	}
	
	appendNode( createText( "\n\n    " ), form );
	
	var fieldset2 = createElement( 'fieldset' );
	setAttribute( fieldset2, 'svelte-4150268863', '' );
	
	appendNode( fieldset2, form );
	
	var legend1 = createElement( 'legend' );
	setAttribute( legend1, 'svelte-4150268863', '' );
	
	appendNode( legend1, fieldset2 );
	appendNode( createText( "Environmental settings" ), legend1 );
	appendNode( createText( "\n        " ), fieldset2 );
	
	var div5 = createElement( 'div' );
	setAttribute( div5, 'svelte-4150268863', '' );
	div5.className = "pure-control-group";
	
	appendNode( div5, fieldset2 );
	
	var label3 = createElement( 'label' );
	setAttribute( label3, 'svelte-4150268863', '' );
	label3.htmlFor = "interval";
	
	appendNode( label3, div5 );
	appendNode( createText( "Latitude" ), label3 );
	appendNode( createText( "\n            " ), div5 );
	
	var input2 = createElement( 'input' );
	setAttribute( input2, 'svelte-4150268863', '' );
	input2.id = "interval";
	input2.type = "text";
	
	var input2_updating = false;
	
	function input2ChangeHandler () {
		input2_updating = true;
		component._set({ latitude: input2.value });
		input2_updating = false;
	}
	
	addEventListener( input2, 'input', input2ChangeHandler );
	
	appendNode( input2, div5 );
	
	input2.value = root.latitude;
	
	appendNode( createText( "\n\n        " ), fieldset2 );
	
	var div6 = createElement( 'div' );
	setAttribute( div6, 'svelte-4150268863', '' );
	div6.className = "pure-control-group";
	
	appendNode( div6, fieldset2 );
	
	var label4 = createElement( 'label' );
	setAttribute( label4, 'svelte-4150268863', '' );
	label4.htmlFor = "interval";
	
	appendNode( label4, div6 );
	appendNode( createText( "Longitude" ), label4 );
	appendNode( createText( "\n            " ), div6 );
	
	var input3 = createElement( 'input' );
	setAttribute( input3, 'svelte-4150268863', '' );
	input3.id = "interval";
	input3.type = "text";
	
	var input3_updating = false;
	
	function input3ChangeHandler () {
		input3_updating = true;
		component._set({ longitude: input3.value });
		input3_updating = false;
	}
	
	addEventListener( input3, 'input', input3ChangeHandler );
	
	appendNode( input3, div6 );
	
	input3.value = root.longitude;
	
	appendNode( createText( "\n\n        " ), fieldset2 );
	
	var div7 = createElement( 'div' );
	setAttribute( div7, 'svelte-4150268863', '' );
	div7.className = "pure-control-group";
	
	appendNode( div7, fieldset2 );
	
	var label5 = createElement( 'label' );
	setAttribute( label5, 'svelte-4150268863', '' );
	label5.htmlFor = "cycle";
	
	appendNode( label5, div7 );
	appendNode( createText( "Cycle" ), label5 );
	appendNode( createText( "\n            " ), div7 );
	
	var select1 = createElement( 'select' );
	setAttribute( select1, 'svelte-4150268863', '' );
	select1.id = "cycle";
	
	var select1_updating = false;
	
	function select1ChangeHandler () {
		select1_updating = true;
		var selectedOption = select1.selectedOptions[0] || select1.options[0];
		component._set({ cycle: selectedOption && selectedOption.__value });
		select1_updating = false;
	}
	
	addEventListener( select1, 'change', select1ChangeHandler );
	
	appendNode( select1, div7 );
	
	var option4 = createElement( 'option' );
	setAttribute( option4, 'svelte-4150268863', '' );
	
	appendNode( option4, select1 );
	appendNode( createText( "diurnal" ), option4 );
	appendNode( createText( "\n                " ), select1 );
	
	var option5 = createElement( 'option' );
	setAttribute( option5, 'svelte-4150268863', '' );
	
	appendNode( option5, select1 );
	appendNode( createText( "nocturnal" ), option5 );
	appendNode( createText( "\n                " ), select1 );
	
	var option6 = createElement( 'option' );
	setAttribute( option6, 'svelte-4150268863', '' );
	
	appendNode( option6, select1 );
	appendNode( createText( "crepuscular" ), option6 );
	appendNode( createText( "\n                " ), select1 );
	
	var option7 = createElement( 'option' );
	setAttribute( option7, 'svelte-4150268863', '' );
	
	appendNode( option7, select1 );
	appendNode( createText( "cathemeral" ), option7 );
	
	var value1 = root.cycle;
	for ( var i1 = 0; i1 < select1.options.length; i1 += 1 ) {
		var option3 = select1.options[i1];
		if ( option3.__value === value1 ) {
			option3.selected = true;
			break;
		}
	}

	return {
		mount: function ( target, anchor ) {
			insertNode( div, target, anchor );
			insertNode( text1, target, anchor );
			insertNode( text2, target, anchor );
			insertNode( form, target, anchor );
		},
		
		update: function ( changed, root ) {
			var __tmp;
		
			if ( ( __tmp = root.title ) !== last_text ) {
				text.data = last_text = __tmp;
			}
			
			if ( !input_updating ) input.value = root.interval;
			
			if ( !input1_updating ) input1.value = root.folder;
			
			if ( !select_updating ) var value = root.sort;
			for ( var i = 0; i < select.options.length; i += 1 ) {
				var option = select.options[i];
				if ( option.__value === value ) {
					option.selected = true;
					break;
				}
			}
			
			option1.__value = option1.textContent;
			
			option2.__value = option2.textContent;
			
			if ( !input2_updating ) input2.value = root.latitude;
			
			if ( !input3_updating ) input3.value = root.longitude;
			
			if ( !select1_updating ) var value1 = root.cycle;
			for ( var i1 = 0; i1 < select1.options.length; i1 += 1 ) {
				var option3 = select1.options[i1];
				if ( option3.__value === value1 ) {
					option3.selected = true;
					break;
				}
			}
			
			option4.__value = option4.textContent;
			
			option5.__value = option5.textContent;
			
			option6.__value = option6.textContent;
			
			option7.__value = option7.textContent;
		},
		
		teardown: function ( detach ) {
			removeEventListener( input, 'input', inputChangeHandler );
			removeEventListener( input1, 'input', input1ChangeHandler );
			removeEventListener( select, 'change', selectChangeHandler );
			removeEventListener( input2, 'input', input2ChangeHandler );
			removeEventListener( input3, 'input', input3ChangeHandler );
			removeEventListener( select1, 'change', select1ChangeHandler );
			
			if ( detach ) {
				detachNode( div );
				detachNode( text1 );
				detachNode( text2 );
				detachNode( form );
			}
		}
	};
}

function main$1 ( options ) {
	options = options || {};
	this._state = options.data || {};
	
	this._observers = {
		pre: Object.create( null ),
		post: Object.create( null )
	};
	
	this._handlers = Object.create( null );
	
	this._root = options._root;
	this._yield = options._yield;
	
	this._torndown = false;
	if ( !addedCss ) addCss();
	
	this._fragment = renderMainFragment( this._state, this );
	if ( options.target ) this._fragment.mount( options.target, null );
}

main$1.prototype.get = get;
main$1.prototype.fire = fire;
main$1.prototype.observe = observe;
main$1.prototype.on = on;
main$1.prototype.set = set;
main$1.prototype._flush = _flush;

main$1.prototype._set = function _set ( newState ) {
	var oldState = this._state;
	this._state = Object.assign( {}, oldState, newState );
	
	dispatchObservers( this, this._observers.pre, newState, oldState );
	if ( this._fragment ) this._fragment.update( newState, this._state );
	dispatchObservers( this, this._observers.post, newState, oldState );
};

main$1.prototype.teardown = main$1.prototype.destroy = function destroy ( detach ) {
	this.fire( 'teardown' );

	this._fragment.teardown( detach !== false );
	this._fragment = null;

	this._state = {};
	this._torndown = true;
};

const get$1 = () => new Promise((resolve, reject) => {
    const req = new XMLHttpRequest();
    req.open('GET', 'http://localhost:8813/config', true);
    req.onload = function () {
        this.status >= 200 && this.status < 300
            ? resolve(req.response)
            : reject(req);
    };
    req.onerror = () => reject(req);
    req.send();
});

const put = config => new Promise((resolve, reject) => {
    const req = new XMLHttpRequest();
    req.open('PUT', 'http://localhost:8813/config');
    req.setRequestHeader('Content-Type', 'application/json');
    req.onload = function () {
        this.status >= 200 && this.status < 300
            ? resolve(req.response)
            : reject(req);
    };
    req.onerror = () => reject(req);
    req.send(JSON.stringify(config));
});

var http = {
    get: get$1,
    put
};

const component = new main$1({
  target: document.querySelector( 'main' ),
  data: {
      title: 'Songster config',
      interval: 5,
      folder: 'songs/eame/',
      sort: 'random',
      latitude: 44.123,
      longitude: -120.555,
      cycle: 'diurnal'
  }
});

component.observe('sort', sort => {
  http.put({sort});
});

component.observe('interval', interval => {
  http.put({interval});
});

component.observe('cycle', cycle => {
  http.put({cycle});
});

}());
